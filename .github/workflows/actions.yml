name: TREXIO CI

on:
  push:
    branches:
      - master
    tags:
      # After vMajor.Minor.Patch _anything_ is allowed (without "/") !
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:
    branches: [ master ]


jobs:

  get_commit_message:
    name: Get commit message
    runs-on: ubuntu-22.04
    outputs:
      message: ${{ steps.commit_message.outputs.message }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791
        # Gets the correct commit message for pull request
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get commit message
        id: commit_message
        run: |
          set -xe
          COMMIT_MSG=$(git log --no-merges -1 --oneline)
          echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo github.ref ${{ github.ref }}

  trexio_ubuntu:
    name: x86 and arm64 Ubuntu
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm]
    runs-on: ${{ matrix.os }}
    needs: get_commit_message

    steps:
      - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791

      - name: check versions
        # TODO: bring back "diff configure_v python_v"
        run: |
          grep AC_INIT configure.ac | tr -d '[]' | awk -F, '{ print $2 }' > configure_v
          grep -w VERSION CMakeLists.txt | grep -v 'cmake_minimum_required' | awk '{ print $2 }' > cmake_v
          grep version python/pytrexio/_version.py | tr -d '"' | awk '{ print $3 }' > python_v
          grep version rust/trexio/Cargo.toml | grep -v features | tr -d '"' | awk '{ print $3 }' > rust_v
          grep version ocaml/trexio/dune-project | tr -d '()' | awk '{ print $2 }' > ocaml_v
          diff configure_v cmake_v 
          diff configure_v rust_v
          diff configure_v ocaml_v

      - name: setup fixed Python version for testing
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f
        with:
          python-version: '3.10'

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libhdf5-dev emacs libtool-bin valgrind

      - name: configure with autotools
        run: |
          ./autogen.sh
          ./configure --enable-silent-rules 

      - name: compile TREXIO
        run: make -j2

      - name: check TREXIO
        run: make -j2 check

      #- name: check via valgrind
      #  run: |
      #    which libtool
      #    cd tests && ./run_valgrind.sh

      - name: Archive test log file
        if: failure()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: test-report-ubuntu
          path: test-suite.log

      - name: create venv with swig 4.1
        run: |
          python3 -m venv trexio-venv
          source trexio-venv/bin/activate
          pip install swig==4.1

      - name: install Python API
        run: |
          source trexio-venv/bin/activate
          make python-install

      - name: check Python API
        run: |
          source trexio-venv/bin/activate
          make python-test

      - name: install Python API with swig 4.3
        run: |
          source trexio-venv/bin/activate
          pip install swig==4.3
          make python-install

      - name: check Python API with swig 4.3
        run: |
          source trexio-venv/bin/activate
          make python-test

      - name: build and move Python API distribution
        run: |
          source trexio-venv/bin/activate
          make python-sdist
          cp python/dist/trexio-*.tar.gz .

      - name: publish Python API distribution as an artifact
        if: >-
          contains(needs.get_commit_message.outputs.message, '[wheel build]') &&
          matrix.os == 'ubuntu-22.04-arm'
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6 
        with:
          name: pytrexio-source
          path: ./trexio-*.tar.gz

      - name: maintainer clean
        run: make maintainer-clean
      
      - name: reconfigure with debugging 
        run: |
          ./autogen.sh
          ./configure --enable-silent-rules --enable-debug --enable-sanitizer
      
      - name: recompile TREXIO
        run: make -j2
      
      - name: recheck TREXIO 
        run: make -j2 check
      
      - name: Archive test log file
        if: failure()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6 
        with:
          name: test-report-ubuntu-memory
          path: test-suite.log
      
      - name: maintainer clean
        run: make maintainer-clean

  trexio_i686:
    name: i686 (32-bit) Linux
    runs-on: ubuntu-22.04
    needs: get_commit_message

    steps:
      - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791

      - name: Set up QEMU for multi-architecture support
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Create i686 compatible Dockerfile
        run: |
          cat > Dockerfile.i686 << 'EOF'
          FROM ubuntu:22.04
          
          # Install i386 architecture support and basic dependencies
          RUN dpkg --add-architecture i386 && \
              apt-get update && \
              apt-get install -y \
                gcc-multilib \
                g++-multilib \
                libc6-dev:i386 \
                emacs \
                libtool-bin \
                valgrind \
                python3 \
                python3-pip \
                python3-venv \
                python3-dev \
                build-essential \
                autoconf \
                automake \
                gfortran-multilib \
                git \
                pkg-config \
                zlib1g-dev:i386 \
                wget \
                cmake
          
          # Build HDF5 for 32-bit
          RUN wget https://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.14/hdf5-1.14.5/src/hdf5-1.14.5.tar.gz && \
              tar -xzf hdf5-1.14.5.tar.gz && \
              cd hdf5-1.14.5 && \
              CC="gcc -m32" ./configure --prefix=/usr/local/hdf5-i386 --host=i686-linux-gnu && \
              make -j$(nproc) && \
              make install && \
              cd .. && \
              rm -rf hdf5-1.14.5*
          
          # Set environment for 32-bit compilation
          ENV CC="gcc -m32" \
              FC="gfortran -m32" \
              CFLAGS="-m32" \
              FCFLAGS="-m32" \
              LDFLAGS="-m32" \
              PKG_CONFIG_PATH="/usr/local/hdf5-i386/lib/pkgconfig:${PKG_CONFIG_PATH}" \
              HDF5_ROOT="/usr/local/hdf5-i386"
          
          WORKDIR /workspace
          EOF

      - name: Build i686 test container
        run: docker build -f Dockerfile.i686 -t trexio-i686 .

      - name: Run i686 tests in container
        run: |
          docker run --rm -v "$PWD:/workspace" trexio-i686 bash -c "
            set -xe
            
            # Verify architecture setup
            echo 'Architecture verification:'
            file /bin/bash
            gcc -m32 -v 2>&1 | tail -1
            python3 -c 'import platform; print(f\"Python: {platform.machine()} {platform.architecture()}\")'
            
            # Check versions
            echo 'Checking version consistency:'
            grep AC_INIT configure.ac | tr -d '[]' | awk -F, '{ print \$2 }' > configure_v
            grep -w VERSION CMakeLists.txt | grep -v 'cmake_minimum_required' | awk '{ print \$2 }' > cmake_v
            grep version python/pytrexio/_version.py | tr -d '\"' | awk '{ print \$3 }' > python_v
            grep version rust/trexio/Cargo.toml | grep -v features | tr -d '\"' | awk '{ print \$3 }' > rust_v
            grep version ocaml/trexio/dune-project | tr -d '()' | awk '{ print \$2 }' > ocaml_v
            diff configure_v cmake_v 
            diff configure_v rust_v
            diff configure_v ocaml_v
            
            # Configure with autotools for 32-bit
            echo 'Configuring with autotools for i686:'
            ./autogen.sh
            ./configure --enable-silent-rules --host=i686-linux-gnu --with-hdf5=/usr/local/hdf5-i386
            
            # Compile TREXIO
            echo 'Compiling TREXIO:'
            make -j2
            
            # Check TREXIO
            echo 'Testing TREXIO:'
            make -j2 check
            
            # Create venv with swig 4.1
            echo 'Setting up Python environment:'
            python3 -m venv trexio-venv
            . trexio-venv/bin/activate
            pip install swig==4.1
            
            # Install Python API
            echo 'Installing Python API:'
            make python-install
            
            # Check Python API
            echo 'Testing Python API:'
            make python-test
            
            # Clean and reconfigure with debugging
            echo 'Testing debug build:'
            make maintainer-clean
            ./autogen.sh
            ./configure --enable-silent-rules --enable-debug --enable-sanitizer --host=i686-linux-gnu --with-hdf5=/usr/local/hdf5-i386
            make -j2
            make -j2 check
            
            echo 'All i686 tests completed successfully!'
          "

      - name: Archive test log file on failure
        if: failure()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: test-report-i686
          path: test-suite.log

  trexio_macos:
    name: x86 and arm64 MacOS
    strategy:
      # macos-13 = x86_64 ; macos-14 = aarch64
      matrix:
        os: [macos-13, macos-14]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791

      - name: setup fixed Python version for testing
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f
        with:
          python-version: '3.12'

      - name: install dependencies
        run: |
          brew install emacs
          brew install hdf5@1.14
          brew install automake
          brew install libtool
          pip install swig==4.3
          swig -version
          
      - name: configure with autotools
        run: |
          brew --prefix hdf5
          ./autogen.sh
          ./configure CC=gcc-12 FC=gfortran-12 --enable-silent-rules

      - name: compile TREXIO
        run: make -j3

      - name: check TREXIO
        run: make -j3 check
      
      - name: create venv
        run: |
          python3 -m venv trexio-venv
          source trexio-venv/bin/activate

      - name: compile Python API
        run: |
          export H5_CFLAGS="-I$(brew --prefix hdf5)/include"
          export H5_LDFLAGS="-L$(brew --prefix hdf5)/lib"
          source trexio-venv/bin/activate
          make python-install
      
      - name: test Python API
        run: |
          source trexio-venv/bin/activate
          make python-test

      - name: Archive test log file
        if: failure()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6 
        with:
          name: test-report-${{ matrix.os }}
          path: test-suite.log

      - name: clean
        run: make clean

  trexio_nix:
    name: Nix
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v31.4.1
    - run: nix flake check -L && nix build -L