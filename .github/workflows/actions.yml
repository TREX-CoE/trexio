name: TREXIO CI

on:
  push:
    branches:
      - master
    tags:
      # After vMajor.Minor.Patch _anything_ is allowed (without "/") !
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:
    branches: [ master ]


jobs:

  get_commit_message:
    name: Get commit message
    runs-on: ubuntu-22.04
    outputs:
      message: ${{ steps.commit_message.outputs.message }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791
        # Gets the correct commit message for pull request
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get commit message
        id: commit_message
        run: |
          set -xe
          COMMIT_MSG=$(git log --no-merges -1 --oneline)
          echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo github.ref ${{ github.ref }}

  trexio_ubuntu:
    name: x86 and arm64 Ubuntu
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm]
    runs-on: ${{ matrix.os }}
    needs: get_commit_message

    steps:
      - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791

      - name: check versions
        # TODO: bring back "diff configure_v python_v"
        run: |
          grep AC_INIT configure.ac | tr -d '[]' | awk -F, '{ print $2 }' > configure_v
          grep -w VERSION CMakeLists.txt | grep -v 'cmake_minimum_required' | awk '{ print $2 }' > cmake_v
          grep version python/pytrexio/_version.py | tr -d '"' | awk '{ print $3 }' > python_v
          grep version rust/trexio/Cargo.toml | grep -v features | tr -d '"' | awk '{ print $3 }' > rust_v
          grep version ocaml/trexio/dune-project | tr -d '()' | awk '{ print $2 }' > ocaml_v
          diff configure_v cmake_v 
          diff configure_v rust_v
          diff configure_v ocaml_v

      - name: setup fixed Python version for testing
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f
        with:
          python-version: '3.10'

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libhdf5-dev emacs libtool-bin valgrind

      - name: configure with autotools
        run: |
          ./autogen.sh
          ./configure --enable-silent-rules 

      - name: compile TREXIO
        run: make -j2

      - name: check TREXIO
        run: make -j2 check

      #- name: check via valgrind
      #  run: |
      #    which libtool
      #    cd tests && ./run_valgrind.sh

      - name: Archive test log file
        if: failure()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: test-report-ubuntu
          path: test-suite.log

      - name: create venv with swig 4.1
        run: |
          python3 -m venv trexio-venv
          source trexio-venv/bin/activate
          pip install swig==4.1

      - name: install Python API
        run: |
          source trexio-venv/bin/activate
          make python-install

      - name: check Python API
        run: |
          source trexio-venv/bin/activate
          make python-test

      - name: install Python API with swig 4.3
        run: |
          source trexio-venv/bin/activate
          pip install swig==4.3
          make python-install

      - name: check Python API with swig 4.3
        run: |
          source trexio-venv/bin/activate
          make python-test

      - name: build and move Python API distribution
        run: |
          source trexio-venv/bin/activate
          make python-sdist
          cp python/dist/trexio-*.tar.gz .

      - name: publish Python API distribution as an artifact
        if: >-
          contains(needs.get_commit_message.outputs.message, '[wheel build]') &&
          matrix.os == 'ubuntu-22.04-arm'
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6 
        with:
          name: pytrexio-source
          path: ./trexio-*.tar.gz

      - name: maintainer clean
        run: make maintainer-clean
      
      - name: reconfigure with debugging 
        run: |
          ./autogen.sh
          ./configure --enable-silent-rules --enable-debug --enable-sanitizer
      
      - name: recompile TREXIO
        run: make -j2
      
      - name: recheck TREXIO 
        run: make -j2 check
      
      - name: Archive test log file
        if: failure()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6 
        with:
          name: test-report-ubuntu-memory
          path: test-suite.log
      
      - name: maintainer clean
        run: make maintainer-clean

  trexio_i686:
    name: i686 (32-bit) Linux cross-compilation
    runs-on: ubuntu-22.04
    needs: get_commit_message

    steps:
      - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791

      - name: Install 32-bit development environment
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            gcc-multilib \
            g++-multilib \
            gfortran-multilib \
            libc6-dev:i386 \
            zlib1g-dev:i386 \
            emacs \
            libtool-bin \
            python3 \
            python3-pip \
            python3-venv \
            python3-dev \
            build-essential \
            autoconf \
            automake \
            git \
            pkg-config \
            swig
          echo 'NOTE: HDF5 disabled for i686 build due to unavailability of libhdf5-dev:i386 in Ubuntu 22.04'

      - name: check versions
        run: |
          grep AC_INIT configure.ac | tr -d '[]' | awk -F, '{ print $2 }' > configure_v
          grep -w VERSION CMakeLists.txt | grep -v 'cmake_minimum_required' | awk '{ print $2 }' > cmake_v
          grep version python/pytrexio/_version.py | tr -d '"' | awk '{ print $3 }' > python_v
          grep version rust/trexio/Cargo.toml | grep -v features | tr -d '"' | awk '{ print $3 }' > rust_v
          grep version ocaml/trexio/dune-project | tr -d '()' | awk '{ print $2 }' > ocaml_v
          diff configure_v cmake_v 
          diff configure_v rust_v
          diff configure_v ocaml_v

      - name: Cross-compile for i686
        run: |
          echo 'Configuring for i686 cross-compilation:'
          ./autogen.sh
          ./configure --host=i686-unknown-linux-gnu CC='gcc -m32' FC='gfortran -m32' --with-hdf5=no --enable-silent-rules
          
          echo 'Compiling TREXIO for i686:'
          make -j2
          
          echo 'Verifying 32-bit binaries:'
          file -L src/.libs/libtrexio.so | grep '32-bit'
          
          echo 'Testing TREXIO:'
          make -j2 check
          
          echo 'Creating distribution package:'
          make -j2 distcheck

      - name: Test in genuine i686 environment
        run: |
          # Create a simple i686 test container
          cat > Dockerfile.i686test << 'EOF'
          FROM i386/ubuntu:22.04
          RUN apt-get update && apt-get install -y \
            build-essential \
            python3 \
            python3-pip \
            python3-venv \
            autoconf \
            automake \
            libtool \
            pkg-config \
            file
          WORKDIR /test
          EOF
          
          docker build -f Dockerfile.i686test -t trexio-i686test .
          
          # Extract the distribution and test in genuine i686 environment
          TARBALL=$(ls trexio-*.tar.gz | head -1)
          docker run --rm -v "$PWD:/host" trexio-i686test bash -c "
            set -xe
            echo 'Testing in genuine i686 environment:'
            file /bin/bash
            
            # Extract and test the distribution
            cd /host
            tar -xzf $TARBALL
            cd trexio-*/
            
            echo 'Configuring in i686 environment:'
            ./configure --with-hdf5=no --enable-silent-rules
            
            echo 'Building in i686 environment:'
            make -j2
            
            echo 'Testing in i686 environment:'
            make -j2 check
            
            echo 'i686 environment test completed successfully!'
          "

      - name: Archive test log file on failure
        if: failure()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: test-report-i686
          path: test-suite.log

  trexio_macos:
    name: x86 and arm64 MacOS
    strategy:
      # macos-13 = x86_64 ; macos-14 = aarch64
      matrix:
        os: [macos-13, macos-14]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791

      - name: setup fixed Python version for testing
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f
        with:
          python-version: '3.12'

      - name: install dependencies
        run: |
          brew install emacs
          brew install hdf5@1.14
          brew install automake
          brew install libtool
          pip install swig==4.3
          swig -version
          
      - name: configure with autotools
        run: |
          brew --prefix hdf5
          ./autogen.sh
          ./configure CC=gcc-12 FC=gfortran-12 --enable-silent-rules

      - name: compile TREXIO
        run: make -j3

      - name: check TREXIO
        run: make -j3 check
      
      - name: create venv
        run: |
          python3 -m venv trexio-venv
          source trexio-venv/bin/activate

      - name: compile Python API
        run: |
          export H5_CFLAGS="-I$(brew --prefix hdf5)/include"
          export H5_LDFLAGS="-L$(brew --prefix hdf5)/lib"
          source trexio-venv/bin/activate
          make python-install
      
      - name: test Python API
        run: |
          source trexio-venv/bin/activate
          make python-test

      - name: Archive test log file
        if: failure()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6 
        with:
          name: test-report-${{ matrix.os }}
          path: test-suite.log

      - name: clean
        run: make clean

  trexio_nix:
    name: Nix
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v31.4.1
    - run: nix flake check -L && nix build -L